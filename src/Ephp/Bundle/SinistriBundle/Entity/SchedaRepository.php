<?php

namespace Ephp\Bundle\SinistriBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SchedaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SchedaRepository extends EntityRepository {

    public function cerca($gestore, $ospedale, $anno, $find) {
        $qb = $this->createQueryBuilder('s');
        if ($gestore) {
            $qb->andWhere('s.gestore = :gestore')->setParameter('gestore', $gestore);
        }
        if (count($ospedale) > 0) {
            $qb->andWhere($qb->expr()->in('s.ospedale', $ospedale));
        }
        if ($anno) {
            $qb->andWhere('s.anno = :anno')->setParameter('anno', $anno);
        }
        if ($find instanceof Scheda) {
            /* @var $find Scheda */
            if ($find->getClaimant()) {
                $qb->andWhere('s.claimant like :q')->setParameter('q', "%{$find->getClaimant()}%");
            }
            if ($find->getSoi()) {
                $qb->andWhere('s.soi = :s')->setParameter('s', $find->getSoi());
            }
            if ($find->getStato()) {
                $qb->andWhere('s.stato = :st')->setParameter('st', $find->getStato()->getId());
            }
            if ($find->getPriorita()) {
                $qb->andWhere('s.priorita = :pr')->setParameter('pr', $find->getPriorita()->getId());
            }
            if ($find->getStatoOperativo()) {
                $qb->andWhere('s.stato_operativo = :so')->setParameter('so', $find->getStatoOperativo()->getId());
            }
            if ($find->getGiudiziale()) {
                switch ($find->getGiudiziale()) {
                    case '':
                    case null:
                    case false:
                        break;
                    case '-':
                        $qb->andWhere("(s.giudiziale = '' OR s.giudiziale IS NULL)");
                        break;
                    case '*':
                        $qb->andWhere($qb->expr()->in('s.giudiziale', array('Y', 'J', 'A', 'C')));
                        break;
                    default:
                        $qb->andWhere('s.giudiziale = :g')->setParameter('g', $find->getGiudiziale());
                        break;
                }
            }
            if ($find->getAmountReserved()) {
                switch ($find->getAmountReserved()) {
                    case 'np':
                        $qb->andWhere("s.amount_reserved = :ar")->setParameter('ar', -1);
                        ;
                        break;
                    case 'f':
                        $qb->andWhere("s.amount_reserved >= :ar")->setParameter('ar', 0);
                        ;
                        break;
                    case '':
                    case null:
                    case false:
                    default:
                        break;
                }
            }
        }
        if (is_string($find)) {
            $qb->andWhere('s.claimant like :q')->setParameter('q', "%{$find}%");
        }
        return $qb->getQuery()->execute();
    }

    public function ritardi($gestore_id = null) {
        $connection = $this->getEntityManager()->getConnection();
        $q = "   SELECT * FROM sx_ritardi r " .
                " WHERE r.priorita != :priorita ".
                "   AND r.giorni > :giorni ".
                ($gestore_id ? " AND r.gestore_id = :id " : "" )
        ;
        $params = array(
            'priorita' => 'definita',
            'giorni' => 60,
            );
        
        if($gestore_id) {
            $params['id'] = $gestore_id;
        }
        $stmt = $connection->executeQuery($q, $params);
        return $stmt->fetchAll();
    }

}
